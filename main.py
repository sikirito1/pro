import telebot
import time
from telebot import types
import psycopg2
from psycopg2 import Error
id_no_ref = 1042554792 #
TOKEN = "RUB"
BOT_TOKEN = "5703266677:AAGHGESqvoEB1dUUWOcRPeaqLB9cvcZajgM"
OWNER_ID = 1743902751
CHANNELS = ['@primmer_spo']
Mini_Withdraw = 45
per_ref = 3
userss = [1743902751]

bot = telebot.TeleBot(BOT_TOKEN)
def check(id):
    for i in CHANNELS:
        check = bot.get_chat_member(i, id)
        if check.status != 'left':
            pass
        else:
            return False
    return True

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")

# –ö—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
sql = db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS users (
    id INT PRIMARY KEY,
    user_name TEXT,
    parent_id INT,
    balance INT NOT NULL DEFAULT 0,
    ref1 INT NOT NULL DEFAULT 0,
    ref2 INT NOT NULL DEFAULT 0,
    wallet TEXT,
    sub_chek INT NOT NULL DEFAULT 0,
    ban INT NOT NULL DEFAULT 0   
)""")
db.commit()
db.close()
ban_users = []
@bot.message_handler(func=lambda message: message.chat.id in ban_users)
def some(message):
   bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.")
#..................................................

#...................–†–∞—Å—Å—ã–ª–∫–∞......................
@bot.message_handler(commands=['send'])
def notify(message):
    try:
        command_sender = message.from_user.id

        if message.chat.id not in OWNER_ID:
            bot.send_message(OWNER_ID, f'–∫—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç —é–∑–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É')

        else:
            with open(r'users.txt') as ids:
                for line in ids:
                    user_id = int(line.strip("\n"))
                    try:
                        bot.send_message(user_id, message.text[message.text.find(' '):])
                    except Exception as e:
                        bot.send_message(command_sender, f'–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —é–∑–µ—Ä–∞–º')
    except Exception as e:
        bot.send_message(command_sender, f'ciot ne to')
#........................................................................................................


def menu(id):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('üÜî –ê–∫–∫–∞—É–Ω—Ç', 'üôåüèª –†–µ—Ñ–µ—Ä–∞–ª—ã')
    keyboard.row('‚öôÔ∏è –ö–æ—à–µ–ª—ë–∫', 'üí∏ –í—ã–≤–æ–¥')
    keyboard.row('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üíª  –ü–∞—Ä—Ç–Ω–µ—Ä—ã')
    bot.send_message(id, "*üè° Home*", parse_mode="Markdown",reply_markup=keyboard)

@bot.message_handler(commands=['start'])
def start(message):
    userr = message.chat.id
    user_namess = message.from_user.username
    msg = message.text
    startms = msg.split()[0]
    referrer = None
    st = "/start"
    if startms == st:
        db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
        sql = db.cursor()
        sql.execute("SELECT id FROM users WHERE id = %s", [userr])
        values = [userr, user_namess]
        if sql.fetchone() is None:
            sql.execute("INSERT INTO users(id, user_name) VALUES(%s, %s)", values)
            db.commit()
        try:

            ref_id = msg.split()[1]
            userr = message.chat.id
            db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
            sql = db.cursor()
            sql.execute("SELECT parent_id FROM users WHERE id = %s", [userr])
            if sql.fetchone()[0] is None:
                sql.execute("UPDATE users SET parent_id = ? WHERE id = %s", [ref_id, userr])
                db.commit()
        except:
            userr = message.chat.id
            db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
            sql = db.cursor()
            sql.execute("SELECT parent_id FROM users WHERE id = %s", [userr])
            if sql.fetchone()[0] is None:
                sql.execute("UPDATE users SET parent_id = %s WHERE id = %s", [id_no_ref, userr])
                db.commit()

        def check(id):
            for i in CHANNELS:
                check = bot.get_chat_member(i, userr)
                if check.status != 'left':
                    pass
                else:
                    return False
            return True

        msg = message.text
        db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
        sql = db.cursor()
        sql.execute("SELECT id FROM users WHERE id = %s", [userr])
        values = [userr, user_namess, id_no_ref]
        if sql.fetchone() is None:
            sql.execute("INSERT INTO users(id, user_name, parent_id) VALUES(%s, %s, %s)", values)
            db.commit()
        markup = telebot.types.InlineKeyboardMarkup()
        url_btnn1 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/+El4BNXj0iUJiOWIy')
        url_btnn2 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
        url_btnn3 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
        url_btnn4 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
        url_btnn5 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
        url_btnn6 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
        markup.add(url_btnn1)
        markup.add(telebot.types.InlineKeyboardButton(
            text='ü§º‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check'))
        msg_start = "*üçî –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–µ–Ω–∂–∏ —Ä–∞–∑–¥–∞—ë—Ç!, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à–∏—Ö —Å–ø–æ–Ω—Å–æ—Ä–æ–≤:"
        for i in CHANNELS:
            msg_start + f"https://t.me/+El4BNXj0iUJiOWIy \n"
        msg_start += "*"
        bot.send_message(userr, msg_start,
                         parse_mode="Markdown", reply_markup=markup)
    else:
        user = message.chat.id
        user = str(user)

        markups = telebot.types.InlineKeyboardMarkup()
        markups.add(telebot.types.InlineKeyboardButton(
            text='ü§º‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check'))
        msg_start = "*üçî –ö–∞–∂–µ—Ç—Å—è –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Åe –∫–∞–Ω–∞–ª—ã.*"
        bot.send_message(user, msg_start,
                         parse_mode="Markdown", reply_markup=markups)
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    try:
        ch = check(call.message.chat.id)
        if call.data == 'check':
            if ch == True:
                user_id = call.message.chat.id
                user_names = call.from_user.username
                user = str(user_id)
                bot.answer_callback_query(
                    callback_query_id=call.id, text='‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å, —Ç–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏.')
                bot.delete_message(call.message.chat.id, call.message.message_id)
                keyboard = telebot.types.ReplyKeyboardMarkup(True)
                keyboard.row('üÜî –ê–∫–∫–∞—É–Ω—Ç', 'üôåüèª –†–µ—Ñ–µ—Ä–∞–ª—ã')
                keyboard.row('‚öôÔ∏è –ö–æ—à–µ–ª—ë–∫', 'üí∏ –í—ã–≤–æ–¥')
                keyboard.row('üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üíª  –ü–∞—Ä—Ç–Ω–µ—Ä—ã')
                bot.send_message(user, "*üè° Home*", parse_mode="Markdown", reply_markup=keyboard)
                db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
                sql = db.cursor()
                sql.execute("SELECT sub_chek FROM users WHERE id = %s", [user])
                if sql.fetchone()[0] == 0:
                    sql.execute("SELECT parent_id FROM users WHERE id = %s", [user])
                    parent_id = sql.fetchone()[0]
                    sql.execute("SELECT parent_id FROM users WHERE id = %s", [parent_id])
                    parent_id2 = sql.fetchone()[0]
                    sql.execute("SELECT balance FROM users WHERE id = %s", [parent_id])
                    bal_par = sql.fetchone()[0]
                    sql.execute("SELECT ref1 FROM users WHERE id = %s", [parent_id])
                    ref1 = sql.fetchone()[0]
                    sql.execute("SELECT ref2 FROM users WHERE id = %s", [parent_id2])
                    ref2 = sql.fetchone()[0]
                    r1 = ref1 + 1
                    r2 = ref2 + 1
                    bal = bal_par + per_ref
                    sql.execute("UPDATE users SET sub_chek = %s WHERE id = %s",[1, user])
                    sql.execute("UPDATE users SET ref1 = %s WHERE id = %s", [r1, parent_id])
                    sql.execute("UPDATE users SET ref2 = %s WHERE id = %s", [r2, parent_id2])
                    sql.execute("UPDATE users SET sub_chek = %s WHERE id = %s", [1, user])
                    sql.execute("UPDATE users SET balance = %s WHERE id = %s", [bal, parent_id])
                    db.commit()
                    bot.send_message(parent_id, f"*üèß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à—ë–ª –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ : +{per_ref} {TOKEN}*", parse_mode="Markdown")
                    joinedFile = open('users.txt', 'a')
                    joinedFile.write(str(user) + "\n")
                    return
            else:
                    bot.answer_callback_query(
                        callback_query_id=call.id, text='‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.')
                    bot.delete_message(call.message.chat.id, call.message.message_id)
                    markupq = types.InlineKeyboardMarkup()
                    url_btnn1 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='https://t.me/+yWh9mlAcZEk3MTMy')
                    url_btnn2 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
                    url_btnn3 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
                    url_btnn4 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
                    url_btnn5 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
                    url_btnn6 = types.InlineKeyboardButton(text='–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', url='')
                    chekb = types.InlineKeyboardButton(text='ü§º‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check')
                    markupq.add(url_btnn1)
                    markupq.add(chekb)
                    msg_start = '*üçî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –ª–∏ –≤—ã –Ω–∞ –≤—Å—ë –∫–∞–Ω–∞–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É".*'
                    bot.send_message(call.message.chat.id, msg_start,
                                     parse_mode="Markdown", reply_markup=markupq)


            return
    except:

        bot.send_message(call.message.chat.id ,"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –µ—ë.")
        bot.send_message(OWNER_ID, "Your bot got an error fix it fast!")
        return
@bot.message_handler(content_types=['text'])
def send_text(message):
   try:
    if message.text == 'üÜî –ê–∫–∫–∞—É–Ω—Ç':
        user_id = message.chat.id
        user = str(user_id)
        db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
        sql = db.cursor()
        accmsg = '*üëÆ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : {}\n\n‚öôÔ∏è –ö–æ—à–µ–ª—ë–∫ : *`{}`*\n\nüí∏ –ë–∞–ª–∞–Ω—Å : *`{}`* {}*'
        user_id = message.chat.id
        sql.execute("SELECT balance FROM users WHERE id = %s", [user])
        balance = sql.fetchone()[0]
        sql.execute("SELECT wallet FROM users WHERE id = %s", [user])
        wallet = sql.fetchone()[0]
        msg = accmsg.format(message.from_user.first_name, wallet, balance, TOKEN)
        bot.send_message(message.chat.id, msg, parse_mode="Markdown")
    if message.text == 'üôåüèª –†–µ—Ñ–µ—Ä–∞–ª—ã':
        ref_msg = "*‚èØÔ∏è –í—Å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ : {} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\nüë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:\n\nü•á 1 –†–µ—Ñ - {} {}\n\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞‚¨áÔ∏è\n{}*"
        bot_name = bot.get_me().username
        user_id = message.chat.id
        user = str(user_id)
        db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
        sql = db.cursor()
        sql.execute("SELECT ref1 FROM users WHERE id = %s", [user])
        ref_count = sql.fetchone()[0]
        ref_link = 'https://telegram.me/{}?start={}'.format(
            bot_name, message.chat.id)
        msg = ref_msg.format(ref_count, per_ref, TOKEN, ref_link)
        bot.send_message(message.chat.id, msg, parse_mode="Markdown")
    def trx_address(message):
        try:
            if message.text == "üö´ –û—Ç–º–µ–Ω–∞":
                return menu(message.chat.id)
            if len(message.text) > 8:
                db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
                sql = db.cursor()
                user_id = message.chat.id
                user = str(user_id)
                wallet = message.text
                sql.execute("UPDATE users SET wallet = %s WHERE id = %s", [wallet, user])
                sql.execute("SELECT wallet FROM users WHERE id = %s", [user])
                wal1 = sql.fetchone()[0]
                db.commit()

                bot.send_message(message.chat.id, "*üíπ–í–∞—à –∫–æ—à–µ–ª—ë–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç. " +
                                 wal1 + "*", parse_mode="Markdown")
                return menu(message.chat.id)
            else:
                bot.send_message(
                    message.chat.id, "*‚ö†Ô∏è –ù–µ –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ—à–µ–ª—ë–∫!*", parse_mode="Markdown")
                return menu(message.chat.id)
        except:
            bot.send_message(message.chat.id,
                             "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –æ—à–∏–±–∫—É.")
            bot.send_message(OWNER_ID, "Your bot got an error fix it fast!\n Error on command: " + message.text)
            return
    if message.text == "‚öôÔ∏è –ö–æ—à–µ–ª—ë–∫":
        user_id = message.chat.id
        user = str(user_id)
        markupp = types.InlineKeyboardMarkup()
        url_btnn = types.InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å PAYEER', url='https://payeer.com/022241524')
        markupp.add(url_btnn)
        keyboard = types.ReplyKeyboardMarkup(True)
        keyboard.row('üö´ Cancel')
        send = bot.send_message(message.chat.id, "*‚ö†Ô∏è–í–≤–µ–¥–∏—Ç–µ –≤–∞—à PAYEER –∫–æ—à–µ–ª—ë–∫:*\n\n ",parse_mode="Markdown", reply_markup=keyboard)
        # Next message will call the name_handler function
        bot.register_next_step_handler(message, trx_address)


    if message.text == "üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        user_id = message.chat.id
        user = str(user_id)
        markupp = types.InlineKeyboardMarkup()
        url_bt = types.InlineKeyboardButton(text='–ü—Ä–∞–≤–∏–ª–∞', url='https://telegra.ph/Pravila-Benzhi-razdayot-10-17')
        markupp.add(url_bt)
        msg = "·éª·¥Ä…Ø ·¥õ·¥á·¥ß·¥á·¥¶·¥©·¥Ä ç ·¥ã·¥Ä–Ω·¥Ä·¥ß - https://t.me/primmer_spo\n\n –ß·¥õ·¥è–±—ã –Ω·¥á  ô·¥Ñ·¥õ·¥©·¥á·¥õ–∏·¥õ—å ·¥®·¥©·¥è–±·¥ß·¥á ç –Ω·¥Ä ·¥®·¥©·¥è·¥õ—è–∂·¥á–Ω–∏–∏ –∏·¥Ñ·¥®·¥è·¥ß—å…ú·¥è ô·¥Ä–Ω–∏—è –±·¥è·¥õ·¥Ä, ·¥®·¥è–∂·¥Ä·¥ß—É–π·¥Ñ·¥õ·¥Ä ·¥®·¥©·¥è—á·¥õ–∏·¥õ·¥á ·¥®·¥©·¥Ä ô–∏·¥ß·¥Ä.üëá"
        bot.send_message(user, msg, reply_markup=markupp)
        return
    if message.text == "üíª  –ü–∞—Ä—Ç–Ω–µ—Ä—ã":
        user_id = message.chat.id
        user = str(user_id)
        bot.send_message(user,'‚óæÔ∏è–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –ø–æ—Å—Ç—ã —Å–ø–æ–Ω—Å–æ—Ä–æ–≤ ‚ùó \n\n -https://t.me/+El4BNXj0iUJiOWIy')
    def amo_with(message):
        try:
            user_id = message.chat.id
            amo = message.text
            user = str(user_id)
            db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
            sql = db.cursor()
            sql.execute("SELECT balance FROM users WHERE id = %s", [user])
            bal = sql.fetchone()[0]
            sql.execute("SELECT wallet FROM users WHERE id = %s", [user])
            wall = sql.fetchone()[0]
            if amo.isdigit() == False:
                bot.send_message(user_id, "_üìõ –ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ._", parse_mode="Markdown")
                return
            if int(message.text) < Mini_Withdraw:
                bot.send_message(
                    user_id, f"_‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ {Mini_Withdraw} {TOKEN}_", parse_mode="Markdown")
                return
            if int(message.text) > bal:
                bot.send_message(
                    user_id, "_‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ –±–æ–ª—å—à–µ, —á–µ–º –≤–∞—à –∏–º–µ–µ—Ç–µ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ._", parse_mode="Markdown")
                return
            amo = int(amo)
            ball = bal - int(amo)
            sql.execute("UPDATE users SET balance = %s WHERE id = %s", [ball, user])
            db.commit()
            bot.send_message(user_id, "‚úÖ –í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.")
            second = time.time()
            user_name = message.from_user.username
            userr = message.chat.id
            pay_id = 5371657093
            bot.send_message(pay_id, '‚úÖ#NEWPAY\n\n‚≠ê –°—É–º–º–∞ ' + '  I  ' + str(amo) + '  \n\nK–æ—à–µ–ª–µ–∫  ' + str(wall) + '   \n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å   ' + str(user_name) + '  \n\n ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è   ' + str(userr) + '   \n\nB—Ä–µ–º—è   ' + time.ctime(second))
        except:
            bot.send_message(message.chat.id,"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –æ—à–∏–±–∫—É.")
            bot.send_message(OWNER_ID, "Your bot got an error fix it fast!\n Error on command: " + message.text)
            return

    if message.text == "üí∏ –í—ã–≤–æ–¥":
        user_id = message.chat.id
        user = str(user_id)

        db = psycopg2.connect(user="myitrkayvvovkm",
                              # –ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ PostgreSQL
                              password="4c652f79a1107d7d4752821bb86dc9a3e0369b8fb2f0c0f6e0429a9e57d0d3f5",
                              host="ec2-34-194-40-194.compute-1.amazonaws.com",
                              port="5432",
                              database="d823td4l4cq140")
        sql = db.cursor()
        sql.execute("SELECT balance FROM users WHERE id = %s", [user])
        bal = sql.fetchone()[0]
        sql.execute("SELECT wallet FROM users WHERE id = %s", [user])
        wall = sql.fetchone()[0]
        if wall == None:
            bot.send_message(user_id, "_‚ùå –ö–æ—à–µ–ª—ë–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω._",
                             parse_mode="Markdown")
            return
        if bal >= Mini_Withdraw:
            bot.send_message(user_id, "_–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:_",
                             parse_mode="Markdown")
            bot.register_next_step_handler(message, amo_with)
        else:
            bot.send_message(
                user_id,
                f"_‚ùå–í–∞—à –±–∞–ª–∞–Ω—Å –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞, —É –≤–∞—Å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ωee {Mini_Withdraw} {TOKEN} –Ω–∞ –±–∞–ª–∞–Ω—Å–µ._",
                parse_mode="Markdown")
            return

   except:
       bot.send_message(user, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–º–µ–µ—Ç –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –∏—Å–ø—Ä–∞–≤–∏—Ç –µ—ë.")
       bot.send_message(OWNER_ID, "Your bot got an error fix it fast!")
       return


if __name__ == '__main__':
    bot.polling(none_stop=True)
